{"version":3,"file":"01-timer.js","sources":["../src/js/01-timer.js"],"sourcesContent":["// flatpickr ve iziToast importluyoruz.\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n/* DOM ögelerini seçiyoruz.*/\nconst refs = {\n  datetimePicker: document.querySelector('#datetime-picker'),\n  startBtn: document.querySelector('[data-start]'),\n  daysEl: document.querySelector('[data-days]'),\n  hoursEl: document.querySelector('[data-hours]'),\n  minutesEl: document.querySelector('[data-minutes]'),\n  secondsEl: document.querySelector('[data-seconds]'),\n};\n\nlet userSelectedDate = null; // Date objesi saklanacak\nlet intervalId = null; // setInterval id saklanacak\n\n/* Helper functions */\nfunction addLeadingZero(value) {\n  // Tek haneli değerleri \"04\" biçimine getiriyor.\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  // Gün iki haneli (ve daha fazlası) olabilir; başlangıcı 2'den kısaysa 0 ekler.\n  refs.daysEl.textContent = addLeadingZero(days);\n  refs.hoursEl.textContent = addLeadingZero(hours);\n  refs.minutesEl.textContent = addLeadingZero(minutes);\n  refs.secondsEl.textContent = addLeadingZero(seconds);\n}\n\nfunction resetDisplayToZero() {\n  updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n}\n\n// Başlangıçta Start pasif olmalı\nrefs.startBtn.disabled = true;\n// Göstergeyi sıfırla\nresetDisplayToZero();\n\n/*flatpickr başlatma */\nconst fpOptions = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const picked = selectedDates[0];\n    if (!picked) return;\n\n    // Eğer seçilen tarih geçmiş veya şu andan önce ise uyar\n    if (picked.getTime() <= Date.now()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      refs.startBtn.disabled = true;\n      userSelectedDate = null;\n    } else {\n      // Gelecek tarih seçildi: butonu aktif et ve userSelectedDate'e ata\n      userSelectedDate = picked;\n      refs.startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(refs.datetimePicker, fpOptions);\n\n/* Start butonu*/\nrefs.startBtn.addEventListener('click', () => {\n  // Eğer valid bir tarih yoksa hiçbir şey yapma\n  if (!userSelectedDate) return;\n\n  // Başlatıldığında: butonu ve input'u kilitle\n  refs.startBtn.disabled = true;\n  refs.datetimePicker.disabled = true;\n\n  // Eğer önceden interval çalışıyorsa temizle\n  if (intervalId) {\n    clearInterval(intervalId);\n    intervalId = null;\n  }\n\n  // İlk güncelleme anlık olarak yapılır (1s gecikme olmaması için)\n  const msLeft = userSelectedDate.getTime() - Date.now();\n  if (msLeft <= 0) {\n    resetDisplayToZero();\n    iziToast.info({\n      title: 'Info',\n      message: 'Selected time is already passed',\n      position: 'topRight',\n    });\n    return;\n  } else {\n    updateTimerDisplay(convertMs(msLeft));\n  }\n\n  // 1 saniyelik interval başlat\n  intervalId = setInterval(() => {\n    const delta = userSelectedDate.getTime() - Date.now();\n\n    if (delta <= 0) {\n      // Süre bitti: interval temizle, göstergeyi sıfırla, bilgilendir\n      clearInterval(intervalId);\n      intervalId = null;\n      resetDisplayToZero();\n\n      iziToast.success({\n        title: 'Done',\n        message: 'Countdown finished',\n        position: 'topRight',\n      });\n\n      return;\n    }\n\n    const time = convertMs(delta);\n    updateTimerDisplay(time);\n  }, 1000);\n});\n"],"names":["refs","userSelectedDate","intervalId","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateTimerDisplay","resetDisplayToZero","fpOptions","selectedDates","picked","iziToast","flatpickr","msLeft","delta","time"],"mappings":"sGAOA,MAAMA,EAAO,CACX,eAAgB,SAAS,cAAc,kBAAkB,EACzD,SAAU,SAAS,cAAc,cAAc,EAC/C,OAAQ,SAAS,cAAc,aAAa,EAC5C,QAAS,SAAS,cAAc,cAAc,EAC9C,UAAW,SAAS,cAAc,gBAAgB,EAClD,UAAW,SAAS,cAAc,gBAAgB,CACpD,EAEA,IAAIC,EAAmB,KACnBC,EAAa,KAGjB,SAASC,EAAeC,EAAO,CAE7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAmB,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAE7DV,EAAK,OAAO,YAAcG,EAAeI,CAAI,EAC7CP,EAAK,QAAQ,YAAcG,EAAeK,CAAK,EAC/CR,EAAK,UAAU,YAAcG,EAAeM,CAAO,EACnDT,EAAK,UAAU,YAAcG,EAAeO,CAAO,CACrD,CAEA,SAASE,GAAqB,CAC5BD,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,CAClE,CAGAX,EAAK,SAAS,SAAW,GAEzBY,IAGA,MAAMC,EAAY,CAChB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAASD,EAAc,CAAC,EACzBC,IAGDA,EAAO,QAAO,GAAM,KAAK,IAAG,GAC9BC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDhB,EAAK,SAAS,SAAW,GACzBC,EAAmB,OAGnBA,EAAmBc,EACnBf,EAAK,SAAS,SAAW,IAE5B,CACH,EAEAiB,EAAUjB,EAAK,eAAgBa,CAAS,EAGxCb,EAAK,SAAS,iBAAiB,QAAS,IAAM,CAE5C,GAAI,CAACC,EAAkB,OAGvBD,EAAK,SAAS,SAAW,GACzBA,EAAK,eAAe,SAAW,GAG3BE,IACF,cAAcA,CAAU,EACxBA,EAAa,MAIf,MAAMgB,EAASjB,EAAiB,QAAS,EAAG,KAAK,IAAG,EACpD,GAAIiB,GAAU,EAAG,CACfN,IACAI,EAAS,KAAK,CACZ,MAAO,OACP,QAAS,kCACT,SAAU,UAChB,CAAK,EACD,MACJ,MACIL,EAAmBN,EAAUa,CAAM,CAAC,EAItChB,EAAa,YAAY,IAAM,CAC7B,MAAMiB,EAAQlB,EAAiB,QAAS,EAAG,KAAK,IAAG,EAEnD,GAAIkB,GAAS,EAAG,CAEd,cAAcjB,CAAU,EACxBA,EAAa,KACbU,IAEAI,EAAS,QAAQ,CACf,MAAO,OACP,QAAS,qBACT,SAAU,UAClB,CAAO,EAED,MACD,CAED,MAAMI,EAAOf,EAAUc,CAAK,EAC5BR,EAAmBS,CAAI,CACxB,EAAE,GAAI,CACT,CAAC"}